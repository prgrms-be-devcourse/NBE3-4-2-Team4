/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/questions/{questionId}/answers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Answer
         * @description 답변를 수정합니다.
         */
        put: operations["modify"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getQuestion"];
        put: operations["update"];
        post?: never;
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/points/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["transfer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/products/deduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["deductFromMember"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/products/accumulate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["accumulateForMember"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["test1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getQuestions"];
        put?: never;
        post: operations["write"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questions/{questionId}/answers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Write Answer
         * @description 질문글에 새로운 답변을 등록합니다.
         */
        post: operations["write_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questions/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["test3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["test2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/answers/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["test4"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["test5"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 상품 조회 (페이징)
         * @description 전체 상품을 페이징 처리하여 조회합니다.
         */
        get: operations["getAllProductsWithPaging"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 상품 조회
         * @description 전체 상품을 조회합니다.
         */
        get: operations["getAllProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/points": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPointHistories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/answers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Answers
         * @description 모든 답변을 가져옵니다.
         */
        get: operations["items"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/answers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Answer by Id
         * @description 답변 Id를 기준으로 특정 답변을 가져옵니다.
         */
        get: operations["item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["home"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Answer: {
            /** Format: int64 */
            readonly id?: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly modifiedAt?: string;
            question?: components["schemas"]["Question"];
            author?: components["schemas"]["Member"];
            content?: string;
        };
        GrantedAuthority: {
            authority?: string;
        };
        Member: {
            /** Format: int64 */
            id?: number;
            /** @enum {string} */
            role?: "ADMIN" | "USER";
            username?: string;
            password?: string;
            phoneNumber?: string;
            nickname?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: int64 */
            point?: number;
            /** @enum {string} */
            oauth2Provider?: "NONE" | "KAKAO";
            authorities?: components["schemas"]["GrantedAuthority"][];
        };
        Question: {
            /** Format: int64 */
            readonly id?: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly modifiedAt?: string;
            author?: components["schemas"]["Member"];
            title?: string;
            content?: string;
            category?: components["schemas"]["QuestionCategory"];
            answers?: components["schemas"]["Answer"][];
        };
        QuestionCategory: {
            /** Format: int64 */
            readonly id?: number;
            name?: string;
        };
        AnswerRequestDto: {
            content: string;
        };
        AnswerDto: {
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            modifiedAt: string;
            content: string;
        };
        RsDataAnswerDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["AnswerDto"];
        };
        QuestionWriteReqDto: {
            title: string;
            content: string;
            /** Format: int64 */
            categoryId: number;
        };
        QuestionDto: {
            /** Format: int64 */
            id?: number;
            title?: string;
            content?: string;
            name?: string;
            categoryName?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        RsDataQuestionDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["QuestionDto"];
        };
        PointTransferReq: {
            username: string;
            /** Format: int64 */
            amount: number;
        };
        Empty: Record<string, never>;
        RsDataEmpty: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["Empty"];
        };
        QuestionWriteResDto: {
            item?: components["schemas"]["QuestionDto"];
            /** Format: int64 */
            totalCount?: number;
        };
        RsDataQuestionWriteResDto: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["QuestionWriteResDto"];
        };
        LoginRequestDto: {
            email: string;
            password: string;
        };
        RsDataString: {
            resultCode: string;
            msg: string;
            data: string;
        };
        PageDtoQuestionDto: {
            /** Format: int32 */
            currentPageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            totalItems?: number;
            hasMore?: boolean;
            items?: components["schemas"]["QuestionDto"][];
        };
        GetItems: {
            /** Format: int64 */
            productId?: number;
            productName?: string;
            /** Format: int32 */
            productPrice?: number;
            productDescription?: string;
            productImageUrl?: string;
            productCategory?: string;
            productSaleState?: string;
        };
        PageDtoGetItems: {
            /** Format: int32 */
            currentPageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            totalItems?: number;
            hasMore?: boolean;
            items?: components["schemas"]["GetItems"][];
        };
        RsDataPageDtoGetItems: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["PageDtoGetItems"];
        };
        RsDataListGetItems: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["GetItems"][];
        };
        PageDtoPointHistoryRes: {
            /** Format: int32 */
            currentPageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            totalItems?: number;
            hasMore?: boolean;
            items?: components["schemas"]["PointHistoryRes"][];
        };
        PointHistoryRes: {
            /** Format: int64 */
            amount?: number;
            /** Format: date-time */
            createdAt?: string;
            counterAccountUsername?: string;
            /** @enum {string} */
            pointCategory?: "TRANSFER" | "PURCHASE" | "ANSWER" | "ADMIN";
        };
        RsDataPageDtoPointHistoryRes: {
            resultCode: string;
            msg: string;
            data: components["schemas"]["PageDtoPointHistoryRes"];
        };
        RsDataVoid: {
            resultCode: string;
            msg: string;
            data: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    modify: {
        parameters: {
            query: {
                question: components["schemas"]["Question"];
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnswerRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataAnswerDto"];
                };
            };
        };
    };
    getQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["QuestionDto"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionWriteReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataQuestionDto"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    transfer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PointTransferReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    deductFromMember: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PointTransferReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    accumulateForMember: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PointTransferReq"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    test1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getQuestions: {
        parameters: {
            query?: {
                searchKeyword?: string;
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageDtoQuestionDto"];
                };
            };
        };
    };
    write: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionWriteReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataQuestionWriteResDto"];
                };
            };
        };
    };
    write_1: {
        parameters: {
            query: {
                question: components["schemas"]["Question"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnswerRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataAnswerDto"];
                };
            };
        };
    };
    test3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    test2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataEmpty"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataString"];
                };
            };
        };
    };
    test4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    test5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllProductsWithPaging: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPageDtoGetItems"];
                };
            };
        };
    };
    getAllProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListGetItems"];
                };
            };
        };
    };
    getPointHistories: {
        parameters: {
            query?: {
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPageDtoPointHistoryRes"];
                };
            };
        };
    };
    items: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["AnswerDto"][];
                };
            };
        };
    };
    item: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["AnswerDto"];
                };
            };
        };
    };
    home: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string;
                };
            };
        };
    };
}
